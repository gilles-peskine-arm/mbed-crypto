#!/usr/bin/env python3
"""Write PSA constant names and values to a text file.
"""

## Copyright (C) 2019, ARM Limited, All Rights Reserved
## SPDX-License-Identifier: Apache-2.0
##
## Licensed under the Apache License, Version 2.0 (the "License"); you may
## not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
## http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
## WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
## This file is part of Mbed TLS (https://tls.mbed.org)

import argparse
import os
import sys

import test_psa_constant_names

HEADERS = ['psa/crypto_values.h']
TEST_SUITES = test_psa_constant_names.TEST_SUITES

class Inputs(test_psa_constant_names.Inputs):
    """Accumulate information about macros to test.

    Test cases that use macro names not found in headers are skipped.
    """

    def accept_test_case_line(self, function, argument):
        #pylint: disable=unused-argument
        undeclared = list(self.generate_undeclared_names(argument))
        return not undeclared

def prettify_expression(expr):
    """Adjust spacing to make an expression prettier."""
    expr = test_psa_constant_names.normalize(expr)
    return expr.replace(',', ', ')

def is_useful_expression(expr):
    """Reject expressions that are not useful to illustrate expression values.

    The following expressions generated by
    `test_psa_constant_names.Inputs.generate_expressions` are not useful:
    * Purely numerical expressions (which are always a hexadecimal constant).
    """
    if expr.startswith('0x'):
        return False
    return True

def process_inputs(options, inputs):
    """Generate expressions using known macro names and calculate their values.

    Generate pairs of ``(expr, value)`` where ``expr`` is an expression and
    ``value`` is its integer value.
    """
    for type_word in ['algorithm', 'key_type']:
        expressions, values = \
            test_psa_constant_names.collect_values(inputs, type_word,
                                                   include_path=options.include)
        yield from zip(map(prettify_expression, expressions), values)

def output_csv(data, out):
    """Write out collected expressions in semicolon-separated CSV format."""
    for expr, value in data:
        if not is_useful_expression(expr):
            continue
        out.write('{};{}\n'.format(expr, value))

def main():
    parser = argparse.ArgumentParser(description=globals()['__doc__'])
    parser.add_argument('--include', '-I',
                        action='append', default=['include'],
                        help='Directory for header files')
    parser.add_argument('--program',
                        default='programs/psa/psa_constant_names',
                        help='Program to test')
    options = parser.parse_args()
    headers = [os.path.join(options.include[0], h) for h in HEADERS]
    inputs = test_psa_constant_names.gather_inputs(headers, TEST_SUITES, Inputs)
    data = process_inputs(options, inputs)
    output_csv(data, sys.stdout)

if __name__ == '__main__':
    main()
